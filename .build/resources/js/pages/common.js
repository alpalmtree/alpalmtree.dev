(()=>{var i=class e extends HTMLElement{static init=()=>customElements.get("x-toggle")?null:customElements.define("x-toggle",e);constructor(){super(),this.addEventListener("change",this)}checkbox=this.querySelector("input");html=document.querySelector("html");handleEvent=()=>{this.checkbox.checked?(this.html.dataset.theme="dark",localStorage.setItem("prefers_schema","dark")):(this.html.dataset.theme="light",localStorage.setItem("prefers_schema","light"))};connectedCallback(){let t=globalThis.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light",c=localStorage.getItem("prefers_schema");if(c){this.html.dataset.theme=c,this.checkbox.checked=c==="dark";return}this.html.dataset.theme=t,this.checkbox.checked=t==="dark"}};i.init();var o=(e,t)=>e.hasAttribute("href")||e.hasAttribute("src")?e.outerHTML.replace(/\?rel=\d+/g,"")===t.outerHTML.replace(/\?rel=\d+/g,""):e.isEqualNode(t),m=async e=>{let c=await(await fetch(e)).text(),l=new DOMParser().parseFromString(c,"text/html"),a=document.querySelector("head"),n=l.querySelector("head"),d=l.querySelector("view-partial"),h=[];for(let s of a.children)[...n.children].some(r=>o(s,r))||h.push(s);for(let s of n.children)[...a.children].some(r=>o(s,r))||a.append(s);h.forEach(s=>s.remove()),document.querySelector("view-partial").replaceWith(d),document.querySelector("header").scrollIntoView()};globalThis.addEventListener("page:changed",({detail:e})=>{document.startViewTransition(async()=>{await m(e)})});globalThis.addEventListener("popstate",()=>{globalThis.dispatchEvent(new CustomEvent("page:changed",{detail:globalThis.location.pathname}))});customElements.define("view-link",class extends HTMLElement{#e=this.querySelector("a").getAttribute("href");connectedCallback(){this.addEventListener("click",e=>{e.preventDefault(),globalThis.history.pushState("",null,this.#e),this.dispatchEvent(new CustomEvent("page:changed",{detail:this.#e,bubbles:!0}))})}});customElements.define("view-partial",class extends HTMLElement{#e=this.getAttribute("script");constructor(){super()}async connectedCallback(){if(!this.#e)return;let{default:e}=await import(this.#e);e?.()}});})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vcmVzb3VyY2VzL2NvbXBvbmVudHMveC10b2dnbGUvY29tcG9uZW50LmpzIiwgIi4uLy4uLy4uLy4uL3Jlc291cmNlcy9qcy92aWV3LXBhcnRpYWxzLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjbGFzcyBUb2dnbGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHN0YXRpYyBpbml0ID0gKCkgPT5cbiAgICAhY3VzdG9tRWxlbWVudHMuZ2V0KFwieC10b2dnbGVcIilcbiAgICAgID8gY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC10b2dnbGVcIiwgVG9nZ2xlKVxuICAgICAgOiBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMpO1xuICB9XG5cbiAgLy8gcmVmZXJlbmNlc1xuICBjaGVja2JveCA9IHRoaXMucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICBodG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIik7XG5cbiAgaGFuZGxlRXZlbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgaXNDaGVja2VkID0gdGhpcy5jaGVja2JveC5jaGVja2VkO1xuXG4gICAgaWYgKGlzQ2hlY2tlZCkge1xuICAgICAgdGhpcy5odG1sLmRhdGFzZXQudGhlbWUgPSBcImRhcmtcIjtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJlZmVyc19zY2hlbWFcIiwgXCJkYXJrXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmh0bWwuZGF0YXNldC50aGVtZSA9IFwibGlnaHRcIjtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJlZmVyc19zY2hlbWFcIiwgXCJsaWdodFwiKTtcbiAgICB9XG4gIH07XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29uc3QgYnJvd3NlclNjaGVtYSA9IGdsb2JhbFRoaXMubWF0Y2hNZWRpYShcbiAgICAgICAgXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIsXG4gICAgICApLm1hdGNoZXNcbiAgICAgID8gXCJkYXJrXCJcbiAgICAgIDogXCJsaWdodFwiO1xuICAgIGNvbnN0IHNpdGVTY2hlbWEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInByZWZlcnNfc2NoZW1hXCIpO1xuXG4gICAgaWYgKHNpdGVTY2hlbWEpIHtcbiAgICAgIHRoaXMuaHRtbC5kYXRhc2V0LnRoZW1lID0gc2l0ZVNjaGVtYTtcbiAgICAgIHRoaXMuY2hlY2tib3guY2hlY2tlZCA9IHNpdGVTY2hlbWEgPT09IFwiZGFya1wiO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaHRtbC5kYXRhc2V0LnRoZW1lID0gYnJvd3NlclNjaGVtYTtcbiAgICB0aGlzLmNoZWNrYm94LmNoZWNrZWQgPSBicm93c2VyU2NoZW1hID09PSBcImRhcmtcIjtcbiAgfVxufVxuXG5Ub2dnbGUuaW5pdCgpO1xuIiwgImNvbnN0IG5vZGVJc0VxdWFsID0gKG5vZGUxLCBub2RlMikgPT4ge1xuICBpZiAobm9kZTEuaGFzQXR0cmlidXRlKFwiaHJlZlwiKSB8fCBub2RlMS5oYXNBdHRyaWJ1dGUoXCJzcmNcIikpIHtcbiAgICByZXR1cm4gbm9kZTEub3V0ZXJIVE1MLnJlcGxhY2UoL1xcP3JlbD1cXGQrL2csIFwiXCIpID09PVxuICAgICAgbm9kZTIub3V0ZXJIVE1MLnJlcGxhY2UoL1xcP3JlbD1cXGQrL2csIFwiXCIpO1xuICB9XG4gIHJldHVybiBub2RlMS5pc0VxdWFsTm9kZShub2RlMik7XG59O1xuXG5jb25zdCByZXBsYWNlRE9NID0gYXN5bmMgKGRldGFpbCkgPT4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChkZXRhaWwpO1xuICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgY29uc3QgZG9jID0gKG5ldyBET01QYXJzZXIoKSkucGFyc2VGcm9tU3RyaW5nKHRleHQsIFwidGV4dC9odG1sXCIpO1xuXG4gIGNvbnN0IGN1cnJlbnRIZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRcIik7XG4gIGNvbnN0IG5ld0hlYWQgPSBkb2MucXVlcnlTZWxlY3RvcihcImhlYWRcIik7XG4gIGNvbnN0IHZpZXdQYXJ0aWFsID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCJ2aWV3LXBhcnRpYWxcIik7XG5cbiAgY29uc3Qgc2NoZWR1bGVSZW1vdmUgPSBbXTtcbiAgZm9yIChjb25zdCBjaGlsZCBvZiBjdXJyZW50SGVhZC5jaGlsZHJlbikge1xuICAgIGlmICghWy4uLm5ld0hlYWQuY2hpbGRyZW5dLnNvbWUoKG5vZGUpID0+IG5vZGVJc0VxdWFsKGNoaWxkLCBub2RlKSkpIHtcbiAgICAgIHNjaGVkdWxlUmVtb3ZlLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgY2hpbGQgb2YgbmV3SGVhZC5jaGlsZHJlbikge1xuICAgIGlmICghWy4uLmN1cnJlbnRIZWFkLmNoaWxkcmVuXS5zb21lKChub2RlKSA9PiBub2RlSXNFcXVhbChjaGlsZCwgbm9kZSkpKSB7XG4gICAgICBjdXJyZW50SGVhZC5hcHBlbmQoY2hpbGQpO1xuICAgIH1cbiAgfVxuICBzY2hlZHVsZVJlbW92ZS5mb3JFYWNoKChlbCkgPT4gZWwucmVtb3ZlKCkpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidmlldy1wYXJ0aWFsXCIpLnJlcGxhY2VXaXRoKHZpZXdQYXJ0aWFsKTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJykuc2Nyb2xsSW50b1ZpZXcoKVxufTtcblxuZ2xvYmFsVGhpcy5hZGRFdmVudExpc3RlbmVyKFwicGFnZTpjaGFuZ2VkXCIsICh7IGRldGFpbCB9KSA9PiB7XG4gIGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHJlcGxhY2VET00oZGV0YWlsKTtcbiAgfSk7XG59KTtcblxuZ2xvYmFsVGhpcy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgKCkgPT4ge1xuICBnbG9iYWxUaGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgbmV3IEN1c3RvbUV2ZW50KFwicGFnZTpjaGFuZ2VkXCIsIHtcbiAgICAgIGRldGFpbDogZ2xvYmFsVGhpcy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICB9KSxcbiAgKTtcbn0pO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXG4gIFwidmlldy1saW5rXCIsXG4gIGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICN0byA9IHRoaXMucXVlcnlTZWxlY3RvcihcImFcIikuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBnbG9iYWxUaGlzLmhpc3RvcnkucHVzaFN0YXRlKFwiXCIsIG51bGwsIHRoaXMuI3RvKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgIG5ldyBDdXN0b21FdmVudChcInBhZ2U6Y2hhbmdlZFwiLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHRoaXMuI3RvLFxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbik7XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcbiAgXCJ2aWV3LXBhcnRpYWxcIixcbiAgY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgI3NjcmlwdCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwic2NyaXB0XCIpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgaWYgKCF0aGlzLiNzY3JpcHQpIHJldHVybjtcbiAgICAgIGNvbnN0IHsgZGVmYXVsdDogbWFpbiB9ID0gYXdhaXQgaW1wb3J0KHRoaXMuI3NjcmlwdCk7XG4gICAgICBtYWluPy4oKTtcbiAgICB9XG4gIH0sXG4pO1xuIl0sCiAgIm1hcHBpbmdzIjogIk1BQUEsSUFBTUEsRUFBTixNQUFNQyxVQUFlLFdBQVksQ0FDL0IsT0FBTyxLQUFPLElBQ1gsZUFBZSxJQUFJLFVBQVUsRUFFMUIsS0FEQSxlQUFlLE9BQU8sV0FBWUEsQ0FBTSxFQUc5QyxhQUFjLENBQ1osTUFBTSxFQUNOLEtBQUssaUJBQWlCLFNBQVUsSUFBSSxDQUN0QyxDQUdBLFNBQVcsS0FBSyxjQUFjLE9BQU8sRUFDckMsS0FBTyxTQUFTLGNBQWMsTUFBTSxFQUVwQyxZQUFjLElBQU0sQ0FDQSxLQUFLLFNBQVMsU0FHOUIsS0FBSyxLQUFLLFFBQVEsTUFBUSxPQUMxQixhQUFhLFFBQVEsaUJBQWtCLE1BQU0sSUFFN0MsS0FBSyxLQUFLLFFBQVEsTUFBUSxRQUMxQixhQUFhLFFBQVEsaUJBQWtCLE9BQU8sRUFFbEQsRUFFQSxtQkFBb0IsQ0FDbEIsSUFBTUMsRUFBZ0IsV0FBVyxXQUM3Qiw4QkFDRixFQUFFLFFBQ0EsT0FDQSxRQUNFQyxFQUFhLGFBQWEsUUFBUSxnQkFBZ0IsRUFFeEQsR0FBSUEsRUFBWSxDQUNkLEtBQUssS0FBSyxRQUFRLE1BQVFBLEVBQzFCLEtBQUssU0FBUyxRQUFVQSxJQUFlLE9BQ3ZDLE1BQ0YsQ0FFQSxLQUFLLEtBQUssUUFBUSxNQUFRRCxFQUMxQixLQUFLLFNBQVMsUUFBVUEsSUFBa0IsTUFDNUMsQ0FDRixFQUVBRixFQUFPLEtBQUssRUM5Q1osSUFBTUksRUFBYyxDQUFDQyxFQUFPQyxJQUN0QkQsRUFBTSxhQUFhLE1BQU0sR0FBS0EsRUFBTSxhQUFhLEtBQUssRUFDakRBLEVBQU0sVUFBVSxRQUFRLGFBQWMsRUFBRSxJQUM3Q0MsRUFBTSxVQUFVLFFBQVEsYUFBYyxFQUFFLEVBRXJDRCxFQUFNLFlBQVlDLENBQUssRUFHMUJDLEVBQWEsTUFBT0MsR0FBVyxDQUVuQyxJQUFNQyxFQUFPLE1BREQsTUFBTSxNQUFNRCxDQUFNLEdBQ1AsS0FBSyxFQUN0QkUsRUFBTyxJQUFJLFVBQVUsRUFBRyxnQkFBZ0JELEVBQU0sV0FBVyxFQUV6REUsRUFBYyxTQUFTLGNBQWMsTUFBTSxFQUMzQ0MsRUFBVUYsRUFBSSxjQUFjLE1BQU0sRUFDbENHLEVBQWNILEVBQUksY0FBYyxjQUFjLEVBRTlDSSxFQUFpQixDQUFDLEVBQ3hCLFFBQVdDLEtBQVNKLEVBQVksU0FDekIsQ0FBQyxHQUFHQyxFQUFRLFFBQVEsRUFBRSxLQUFNSSxHQUFTWixFQUFZVyxFQUFPQyxDQUFJLENBQUMsR0FDaEVGLEVBQWUsS0FBS0MsQ0FBSyxFQUk3QixRQUFXQSxLQUFTSCxFQUFRLFNBQ3JCLENBQUMsR0FBR0QsRUFBWSxRQUFRLEVBQUUsS0FBTUssR0FBU1osRUFBWVcsRUFBT0MsQ0FBSSxDQUFDLEdBQ3BFTCxFQUFZLE9BQU9JLENBQUssRUFHNUJELEVBQWUsUUFBU0csR0FBT0EsRUFBRyxPQUFPLENBQUMsRUFDMUMsU0FBUyxjQUFjLGNBQWMsRUFBRSxZQUFZSixDQUFXLEVBQzlELFNBQVMsY0FBYyxRQUFRLEVBQUUsZUFBZSxDQUNsRCxFQUVBLFdBQVcsaUJBQWlCLGVBQWdCLENBQUMsQ0FBRSxPQUFBTCxDQUFPLElBQU0sQ0FDMUQsU0FBUyxvQkFBb0IsU0FBWSxDQUN2QyxNQUFNRCxFQUFXQyxDQUFNLENBQ3pCLENBQUMsQ0FDSCxDQUFDLEVBRUQsV0FBVyxpQkFBaUIsV0FBWSxJQUFNLENBQzVDLFdBQVcsY0FDVCxJQUFJLFlBQVksZUFBZ0IsQ0FDOUIsT0FBUSxXQUFXLFNBQVMsUUFDOUIsQ0FBQyxDQUNILENBQ0YsQ0FBQyxFQUVELGVBQWUsT0FDYixZQUNBLGNBQWMsV0FBWSxDQUN4QlUsR0FBTSxLQUFLLGNBQWMsR0FBRyxFQUFFLGFBQWEsTUFBTSxFQUVqRCxtQkFBb0IsQ0FDbEIsS0FBSyxpQkFBaUIsUUFBVSxHQUFNLENBQ3BDLEVBQUUsZUFBZSxFQUNqQixXQUFXLFFBQVEsVUFBVSxHQUFJLEtBQU0sS0FBS0EsRUFBRyxFQUMvQyxLQUFLLGNBQ0gsSUFBSSxZQUFZLGVBQWdCLENBQzlCLE9BQVEsS0FBS0EsR0FDYixRQUFTLEVBQ1gsQ0FBQyxDQUNILENBQ0YsQ0FBQyxDQUNILENBQ0YsQ0FDRixFQUVBLGVBQWUsT0FDYixlQUNBLGNBQWMsV0FBWSxDQUN4QkMsR0FBVSxLQUFLLGFBQWEsUUFBUSxFQUVwQyxhQUFjLENBQ1osTUFBTSxDQUNSLENBRUEsTUFBTSxtQkFBb0IsQ0FDeEIsR0FBSSxDQUFDLEtBQUtBLEdBQVMsT0FDbkIsR0FBTSxDQUFFLFFBQVNDLENBQUssRUFBSSxNQUFNLE9BQU8sS0FBS0QsSUFDNUNDLElBQU8sQ0FDVCxDQUNGLENBQ0YiLAogICJuYW1lcyI6IFsiVG9nZ2xlIiwgIl9Ub2dnbGUiLCAiYnJvd3NlclNjaGVtYSIsICJzaXRlU2NoZW1hIiwgIm5vZGVJc0VxdWFsIiwgIm5vZGUxIiwgIm5vZGUyIiwgInJlcGxhY2VET00iLCAiZGV0YWlsIiwgInRleHQiLCAiZG9jIiwgImN1cnJlbnRIZWFkIiwgIm5ld0hlYWQiLCAidmlld1BhcnRpYWwiLCAic2NoZWR1bGVSZW1vdmUiLCAiY2hpbGQiLCAibm9kZSIsICJlbCIsICIjdG8iLCAiI3NjcmlwdCIsICJtYWluIl0KfQo=
